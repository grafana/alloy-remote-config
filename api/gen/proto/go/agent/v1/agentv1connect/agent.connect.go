// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: agent/v1/agent.proto

package agentv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/grafana/agent-remote-config/api/gen/proto/go/agent/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// AgentServiceName is the fully-qualified name of the AgentService service.
	AgentServiceName = "agent.v1.AgentService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AgentServiceGetConfigProcedure is the fully-qualified name of the AgentService's GetConfig RPC.
	AgentServiceGetConfigProcedure = "/agent.v1.AgentService/GetConfig"
	// AgentServiceGetAgentProcedure is the fully-qualified name of the AgentService's GetAgent RPC.
	AgentServiceGetAgentProcedure = "/agent.v1.AgentService/GetAgent"
	// AgentServiceListAgentsProcedure is the fully-qualified name of the AgentService's ListAgents RPC.
	AgentServiceListAgentsProcedure = "/agent.v1.AgentService/ListAgents"
	// AgentServiceCreateAgentProcedure is the fully-qualified name of the AgentService's CreateAgent
	// RPC.
	AgentServiceCreateAgentProcedure = "/agent.v1.AgentService/CreateAgent"
	// AgentServiceUpdateAgentProcedure is the fully-qualified name of the AgentService's UpdateAgent
	// RPC.
	AgentServiceUpdateAgentProcedure = "/agent.v1.AgentService/UpdateAgent"
	// AgentServiceDeleteAgentProcedure is the fully-qualified name of the AgentService's DeleteAgent
	// RPC.
	AgentServiceDeleteAgentProcedure = "/agent.v1.AgentService/DeleteAgent"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	agentServiceServiceDescriptor           = v1.File_agent_v1_agent_proto.Services().ByName("AgentService")
	agentServiceGetConfigMethodDescriptor   = agentServiceServiceDescriptor.Methods().ByName("GetConfig")
	agentServiceGetAgentMethodDescriptor    = agentServiceServiceDescriptor.Methods().ByName("GetAgent")
	agentServiceListAgentsMethodDescriptor  = agentServiceServiceDescriptor.Methods().ByName("ListAgents")
	agentServiceCreateAgentMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("CreateAgent")
	agentServiceUpdateAgentMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("UpdateAgent")
	agentServiceDeleteAgentMethodDescriptor = agentServiceServiceDescriptor.Methods().ByName("DeleteAgent")
)

// AgentServiceClient is a client for the agent.v1.AgentService service.
type AgentServiceClient interface {
	// GetConfig returns the agent's configuration.
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
	// GetAgent returns information about the agent.
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.Agent], error)
	// ListAgents returns information about all agents.
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.Agents], error)
	// CreateAgent registers a new agent.
	CreateAgent(context.Context, *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.Agent], error)
	// UpdateAgent updates an existing agent.
	UpdateAgent(context.Context, *connect.Request[v1.UpdateAgentRequest]) (*connect.Response[v1.Agent], error)
	// DeleteAgent deletes an existing agent.
	DeleteAgent(context.Context, *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error)
}

// NewAgentServiceClient constructs a client for the agent.v1.AgentService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAgentServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) AgentServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &agentServiceClient{
		getConfig: connect.NewClient[v1.GetConfigRequest, v1.GetConfigResponse](
			httpClient,
			baseURL+AgentServiceGetConfigProcedure,
			connect.WithSchema(agentServiceGetConfigMethodDescriptor),
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
		getAgent: connect.NewClient[v1.GetAgentRequest, v1.Agent](
			httpClient,
			baseURL+AgentServiceGetAgentProcedure,
			connect.WithSchema(agentServiceGetAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		listAgents: connect.NewClient[v1.ListAgentsRequest, v1.Agents](
			httpClient,
			baseURL+AgentServiceListAgentsProcedure,
			connect.WithSchema(agentServiceListAgentsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		createAgent: connect.NewClient[v1.CreateAgentRequest, v1.Agent](
			httpClient,
			baseURL+AgentServiceCreateAgentProcedure,
			connect.WithSchema(agentServiceCreateAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		updateAgent: connect.NewClient[v1.UpdateAgentRequest, v1.Agent](
			httpClient,
			baseURL+AgentServiceUpdateAgentProcedure,
			connect.WithSchema(agentServiceUpdateAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		deleteAgent: connect.NewClient[v1.DeleteAgentRequest, v1.DeleteAgentResponse](
			httpClient,
			baseURL+AgentServiceDeleteAgentProcedure,
			connect.WithSchema(agentServiceDeleteAgentMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// agentServiceClient implements AgentServiceClient.
type agentServiceClient struct {
	getConfig   *connect.Client[v1.GetConfigRequest, v1.GetConfigResponse]
	getAgent    *connect.Client[v1.GetAgentRequest, v1.Agent]
	listAgents  *connect.Client[v1.ListAgentsRequest, v1.Agents]
	createAgent *connect.Client[v1.CreateAgentRequest, v1.Agent]
	updateAgent *connect.Client[v1.UpdateAgentRequest, v1.Agent]
	deleteAgent *connect.Client[v1.DeleteAgentRequest, v1.DeleteAgentResponse]
}

// GetConfig calls agent.v1.AgentService.GetConfig.
func (c *agentServiceClient) GetConfig(ctx context.Context, req *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return c.getConfig.CallUnary(ctx, req)
}

// GetAgent calls agent.v1.AgentService.GetAgent.
func (c *agentServiceClient) GetAgent(ctx context.Context, req *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.Agent], error) {
	return c.getAgent.CallUnary(ctx, req)
}

// ListAgents calls agent.v1.AgentService.ListAgents.
func (c *agentServiceClient) ListAgents(ctx context.Context, req *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.Agents], error) {
	return c.listAgents.CallUnary(ctx, req)
}

// CreateAgent calls agent.v1.AgentService.CreateAgent.
func (c *agentServiceClient) CreateAgent(ctx context.Context, req *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.Agent], error) {
	return c.createAgent.CallUnary(ctx, req)
}

// UpdateAgent calls agent.v1.AgentService.UpdateAgent.
func (c *agentServiceClient) UpdateAgent(ctx context.Context, req *connect.Request[v1.UpdateAgentRequest]) (*connect.Response[v1.Agent], error) {
	return c.updateAgent.CallUnary(ctx, req)
}

// DeleteAgent calls agent.v1.AgentService.DeleteAgent.
func (c *agentServiceClient) DeleteAgent(ctx context.Context, req *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error) {
	return c.deleteAgent.CallUnary(ctx, req)
}

// AgentServiceHandler is an implementation of the agent.v1.AgentService service.
type AgentServiceHandler interface {
	// GetConfig returns the agent's configuration.
	GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error)
	// GetAgent returns information about the agent.
	GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.Agent], error)
	// ListAgents returns information about all agents.
	ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.Agents], error)
	// CreateAgent registers a new agent.
	CreateAgent(context.Context, *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.Agent], error)
	// UpdateAgent updates an existing agent.
	UpdateAgent(context.Context, *connect.Request[v1.UpdateAgentRequest]) (*connect.Response[v1.Agent], error)
	// DeleteAgent deletes an existing agent.
	DeleteAgent(context.Context, *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error)
}

// NewAgentServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAgentServiceHandler(svc AgentServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	agentServiceGetConfigHandler := connect.NewUnaryHandler(
		AgentServiceGetConfigProcedure,
		svc.GetConfig,
		connect.WithSchema(agentServiceGetConfigMethodDescriptor),
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceGetAgentHandler := connect.NewUnaryHandler(
		AgentServiceGetAgentProcedure,
		svc.GetAgent,
		connect.WithSchema(agentServiceGetAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceListAgentsHandler := connect.NewUnaryHandler(
		AgentServiceListAgentsProcedure,
		svc.ListAgents,
		connect.WithSchema(agentServiceListAgentsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceCreateAgentHandler := connect.NewUnaryHandler(
		AgentServiceCreateAgentProcedure,
		svc.CreateAgent,
		connect.WithSchema(agentServiceCreateAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceUpdateAgentHandler := connect.NewUnaryHandler(
		AgentServiceUpdateAgentProcedure,
		svc.UpdateAgent,
		connect.WithSchema(agentServiceUpdateAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	agentServiceDeleteAgentHandler := connect.NewUnaryHandler(
		AgentServiceDeleteAgentProcedure,
		svc.DeleteAgent,
		connect.WithSchema(agentServiceDeleteAgentMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/agent.v1.AgentService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AgentServiceGetConfigProcedure:
			agentServiceGetConfigHandler.ServeHTTP(w, r)
		case AgentServiceGetAgentProcedure:
			agentServiceGetAgentHandler.ServeHTTP(w, r)
		case AgentServiceListAgentsProcedure:
			agentServiceListAgentsHandler.ServeHTTP(w, r)
		case AgentServiceCreateAgentProcedure:
			agentServiceCreateAgentHandler.ServeHTTP(w, r)
		case AgentServiceUpdateAgentProcedure:
			agentServiceUpdateAgentHandler.ServeHTTP(w, r)
		case AgentServiceDeleteAgentProcedure:
			agentServiceDeleteAgentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAgentServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAgentServiceHandler struct{}

func (UnimplementedAgentServiceHandler) GetConfig(context.Context, *connect.Request[v1.GetConfigRequest]) (*connect.Response[v1.GetConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.AgentService.GetConfig is not implemented"))
}

func (UnimplementedAgentServiceHandler) GetAgent(context.Context, *connect.Request[v1.GetAgentRequest]) (*connect.Response[v1.Agent], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.AgentService.GetAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) ListAgents(context.Context, *connect.Request[v1.ListAgentsRequest]) (*connect.Response[v1.Agents], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.AgentService.ListAgents is not implemented"))
}

func (UnimplementedAgentServiceHandler) CreateAgent(context.Context, *connect.Request[v1.CreateAgentRequest]) (*connect.Response[v1.Agent], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.AgentService.CreateAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) UpdateAgent(context.Context, *connect.Request[v1.UpdateAgentRequest]) (*connect.Response[v1.Agent], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.AgentService.UpdateAgent is not implemented"))
}

func (UnimplementedAgentServiceHandler) DeleteAgent(context.Context, *connect.Request[v1.DeleteAgentRequest]) (*connect.Response[v1.DeleteAgentResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("agent.v1.AgentService.DeleteAgent is not implemented"))
}
