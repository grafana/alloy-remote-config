syntax = "proto3";

package collector.v1;

option go_package = "github.com/grafana/alloy-remote-config/api/gen/proto/go/collector/v1;collectorv1";

// GetConfigRequest is the request message to get an collector's configuration.
// The collector's ID and any supplied attributes are used to determine which
// pipelines to include in the configuration.
message GetConfigRequest {
  string id = 1;
  map<string, string> attributes = 2;

  // Hash is used to determine if the configuration has changed.
  string hash = 3;
}

message GetConfigResponse {
  string content = 1;

  // Hash is used to determine if the configuration has changed.
  string hash = 2;

  // not_modified is set to true if the configuration has not changed and
  // the client should not update its configuration from the response.
  bool not_modified = 3;

  // register_needed is set to true if changes are detected and alloy should
  // re-register itself.
  bool register_needed = 4;
}

message RegisterCollectorRequest {
  string id = 1;
  map<string, string> attributes = 2;
  string name = 3;
}

message RegisterCollectorResponse {
}

message UnregisterCollectorRequest {
  string id = 1;
}

message UnregisterCollectorResponse {
}


// CollectorService is the service that provides remote configuration for the collector.
// It is used to register and update the collector's attributes, and to fetch the
// collector's configuration.
service CollectorService {
  // GetConfig returns the collector's configuration. 
  rpc GetConfig (GetConfigRequest) returns (GetConfigResponse) {
    option idempotency_level = NO_SIDE_EFFECTS;
  };

  // RegisterCollector registers the collector with the given ID and attributes. It will
  // update the collector's attributes if the collector is already registered and the
  // attributes are different.
  rpc RegisterCollector (RegisterCollectorRequest) returns (RegisterCollectorResponse) {
    option idempotency_level = IDEMPOTENT;
  };

  // UnregisterCollector unregisters the collector with the given ID.
  rpc UnregisterCollector (UnregisterCollectorRequest) returns (UnregisterCollectorResponse) {
    option idempotency_level = IDEMPOTENCY_UNKNOWN;
  };
}
